
from aiogram import Bot, Dispatcher
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import asyncio
import logging
from dotenv import load_dotenv
import os
import sys

from inl_kb import *
from db import Database

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

load_dotenv("config.env")
BOT_TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMINID")

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)
Db = Database()

class TaskMaker(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Å–∫–∞"""
    number_of_desk = State()
    task_name = State()
    task_description = State()
    task_date = State()

@dp.message(CommandStart())
async def start_bot(message: Message):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    await bot.send_message(
        message.from_user.id,
        text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Ç–≤–æ—ë–º –ø–ª–∞–Ω–µ—Ä–µ –¥–µ–ª!",
        reply_markup=start_kb()
                           )

@dp.message(Command("stop"))
async def stop_bot(message: Message):
    """–°—Ç–æ–ø –±–æ—Ç–∞, –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if message.from_user.id == int(ADMIN_ID):
        await bot.send_message(
            message.from_user.id,
            text="–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                            )
        sys.exit()

@dp.callback_query(lambda c: c.data == "my_descks")
async def my_desks(callback: CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ–≥–æ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å–∫–∏.
    –ï—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–æ—Å–∫—É"""
    global Db
    for user_id in Db.take_users_ids():
        if user_id == callback.from_user.id and Db.take_user_cnt_desks(user_id) != 0: 
            await bot.send_message(callback.from_user.id, "–í–æ—Ç –≤–∞—à–∏ –¥–æ—Å–∫–∏:", reply_markup=desks_kb(user_id))
            await callback.answer()
            break
        elif user_id == callback.from_user.id and Db.take_user_cnt_desks(user_id) == 0:
            await bot.send_message(callback.from_user.id, text="–£ –≤–∞—Å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏. \n–°–µ–π—á–∞—Å –º—ã —Å–æ–∑–¥–∞–¥–∏–º –≤–∞–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É!")
            try:
                Db.create_desk(callback.from_user.id)
                await bot.send_message(callback.from_user.id, text="–î–æ—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
                await bot.send_message(callback.from_user.id, "–í–æ—Ç –≤–∞—à–∏ –¥–æ—Å–∫–∏:", reply_markup=desks_kb(user_id))
            except:
                await bot.send_message(callback.from_user.id, text="–í–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            await callback.answer()
            break
    else:
        await bot.send_message(callback.from_user.id, text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–µ–π—á–∞—Å –≤–∞—Å –¥–æ–±–∞–≤–∏–º...")
        Db.add_user(callback.from_user.id, callback.from_user.username, callback.from_user.first_name)
        await bot.send_message(callback.from_user.id, text="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=start_kb())
        await callback.answer()


@dp.callback_query(lambda c: c.data == "create_desk")
async def create_desk(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –¥–æ—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global Db
    user_id = callback.from_user.id
    if Db.take_user_cnt_desks(user_id) < 10:
        try:
            Db.create_desk(callback.from_user.id)
            await bot.send_message(callback.from_user.id, text="–î–æ—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
            await bot.send_message(callback.from_user.id, text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Ç–≤–æ—ë–º –ø–ª–∞–Ω–µ—Ä–µ –¥–µ–ª!", reply_markup=start_kb())
        except:
            await bot.send_message(callback.from_user.id, text="–í–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    else:
        await bot.send_message(callback.from_user.id, text="–í–∞–º–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–º–µ—é—â–∏—Ö—Å—è –¥–æ—Å–æ–∫.")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith(f"desks_"))
async def open_desk_menu(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ—Å–∫–∏ –∏ –º–µ–Ω—é"""
    data = callback.data.split("_")
    await bot.send_message(callback.from_user.id, 
                           text=f"–ù–æ–º–µ—Ä –¥–æ—Å–∫–∏: {int(data[2]) + 1}\n"\
                            f"–í–ª–∞–¥–µ–ª–µ—Ü: {callback.from_user.username}\n"\
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á:  \n\n"\
                            f"–î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è?", 
                           reply_markup=desk_menu(int(data[1]), int(data[2])))
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith(f"edit_desk_"))
async def edit_desk(callback: CallbackQuery):
    """–†–µ–∂–∏–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏: —É–¥–∞–ª–µ–Ω–∏–µ, —Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏, —Ü–µ–ª–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–æ–≤"""
    data = callback.data.split("_")
    await bot.send_message(callback.from_user.id, text="–í–æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ", reply_markup=edit_desk_kb(int(data[-2]), int(data[-1])))
    await callback.answer()


# --------------- –î–æ–±–∞–≤–ª–µ–Ω–µ–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ------------------
@dp.callback_query(lambda c: c.data.startswith(f"add_new_task_to_desk_"))
async def add_new_task_to_user_desk(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Å–∫–∞ –≤ –¥–æ—Å–∫—É"""
    data = callback.data.split("_")
    await state.set_state(TaskMaker.number_of_desk)
    await state.update_data(number_of_desk=int(data[-1]))
    await state.set_state(TaskMaker.task_name)
    await bot.send_message(callback.from_user.id, text="–î–∞–≤–∞–π—Ç–µ –≤–≤–µ–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    await callback.answer()

@dp.message(TaskMaker.task_name)
async def task_descriprion(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ"""
    await state.update_data(task_name=message.text)
    await state.set_state(TaskMaker.task_description)
    await bot.send_message(message.from_user.id, text='üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. (–Ω–µ–æ–±–µ–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ "-")')


@dp.message(TaskMaker.task_description)
async def task_date(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ –∑–∞–¥–∞—á–µ"""
    await state.update_data(task_description=message.text)
    await state.set_state(TaskMaker.task_date)
    await bot.send_message(message.from_user.id, text='‚è≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏. (–Ω–µ–æ–±–µ–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ "-")\n–î–∞—Ç—É –≤–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025üóì')


@dp.message(TaskMaker.task_date)
async def task_data_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –û—á–∏—â–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    await state.update_data(task_date=message.text)
    task_data = await state.get_data()
    await state.clear()
    try:
        Db.add_task_to_desk(message.from_user.id, int(task_data['number_of_desk']) + 1, task_data['task_name'], task_description=task_data['task_description'], date_time=task_data['task_date'])
        await bot.send_message(message.from_user.id, text='–¢–∞—Å–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Å–∫—É!')
    except ValueError as e:
        await bot.send_message(message.from_user.id, text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, —Ç–∞–∫ –∫–∞–∫ {e.args[0].lower()}')
        print(e.args)


@dp.callback_query(lambda c: c.data.startswith(f"add_new_task_to_desk_"))
async def add_new_task_to_user_desk(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Å–∫–∞ –≤ –¥–æ—Å–∫—É"""
    data = callback.data.split("_")
    await state.set_state(TaskMaker.number_of_desk)
    await state.update_data(number_of_desk=int(data[-1]))
    await state.set_state(TaskMaker.task_name)
    await bot.send_message(callback.from_user.id, text="–î–∞–≤–∞–π—Ç–µ –≤–≤–µ–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    await callback.answer()
# ----------------------------------------------------------------------------


async def main():
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())